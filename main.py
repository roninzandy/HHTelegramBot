"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö —Å —Å–∞–π—Ç–∞ hh.kz –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–º–æ—â—å—é telegram-–±–æ—Ç–∞.

–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º. –ü—Ä–æ–µ–∫—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –º–æ–¥—É–ª–µ–π:
1. main.py - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
2. config.py - —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ telegram-–±–æ—Ç–µ.
3. parsing.py - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.
4. db.py - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –≤–∏–¥–µ html-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É selenium_data.
2. –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
3. –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ
–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î.
4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö.
5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–º–æ—â—å—é telegram-–±–æ—Ç–∞.

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
- pyTelegramBotAPI
- telebot
- BeautifulSoup4
- lxml
- selenium
- requests

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å.

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ telegram-–±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ telegram –ø–æ –∏–º–µ–Ω–∏ @beastchargerbot (https://t.me/beastchargerbot).
"""

import os
import re
import threading
import time
import telebot

import config

from parsing import run_parsing

bot = telebot.TeleBot(config.TOKEN_TEST)

bot_active = True
subscribed_users = {}
admin_users = {}

MIN_PERIOD = 20
MAX_PERIOD = 60
ALLOWED_PERIODS = [i for i in range(MIN_PERIOD, MAX_PERIOD+1, 10)]
time_between_scanning = 30




@bot.message_handler(commands=['start'])
def welcome(message):
    if bot_active:
        chat_id = message.chat.id
        bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! \n'
                                          f'–Ø - <b>{bot.get_me().first_name}</b>, '
                                          '–∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏'
                                          ' —Å hh.kz!', parse_mode='HTML')
        if chat_id not in subscribed_users:
            subscribed_users[chat_id] = True


@bot.message_handler(commands=['admin'])
def admin(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.')
    if message.text == '/admin':
        bot.register_next_step_handler(message, admin_password)


def admin_password(message):
    if message.text == config.admin_password:
        admin_success(message)


@bot.message_handler(commands=['adminquit'])
def admin_quit(message):
    chat_id = message.chat.id
    if chat_id in admin_users:
        del admin_users[chat_id]
        bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Å—Ç–∞–ª–∏ –æ–±—ã—á–Ω—ã–º —é–∑–µ—Ä–æ–º!')


@bot.message_handler(commands=['users'])
def users(message):
    chat_id = message.chat.id
    if chat_id in admin_users:
        bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Ö –±–æ—Ç–∞: {len(subscribed_users)}')


@bot.message_handler(commands=['stop'])
def stop_bot(message):
    chat_id = message.chat.id
    if chat_id in admin_users:
        global bot_active
        if not bot_active:
            bot.send_message(chat_id, "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            bot.send_message(chat_id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            bot_active = False


@bot.message_handler(commands=['run'])
def run_bot(message):
    chat_id = message.chat.id
    if chat_id in admin_users:
        global bot_active
        if bot_active:
            bot.send_message(chat_id, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        else:
            bot.send_message(chat_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            bot_active = True


@bot.message_handler(commands=['message'])
def message_for_users(message):
    chat_id = message.chat.id
    if chat_id in admin_users:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        bot.register_next_step_handler(message, sending_message_for_users)


def sending_message_for_users(message):
    for user_id in subscribed_users.keys():
        bot.send_message(user_id, f'‚ùóÔ∏è {message.text}')


def admin_success(message):
    chat_id = message.chat.id
    if bot_active:
        bot_status = '–±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç'
    else:
        bot_status = '–±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'

    bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {message.from_user.first_name}. '
                                      f'–¢–µ–ø–µ—Ä—å —É –í–∞—Å –±–æ–ª—å—à–µ –≤–ª–∞—Å—Ç–∏ –Ω–∞–¥ –±–æ—Ç–æ–º! \n\n'
                                      f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>{bot_status}</b>.\n\n'
                                      f'–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–µ <b>{time_between_scanning}</b> –º–∏–Ω—É—Ç.\n\n'
                                      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                      '/period [—á–∏—Å–ª–æ] - –∑–∞–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö) –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É '
                                      '–∑–∞–ø—Ä–æ—Å—É.\n'
                                      '/users - –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Ö –±–æ—Ç–∞.\n'
                                      '/message - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n'
                                      '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.\n'
                                      '/run - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n'
                                      '/adminquit - –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.',
                     parse_mode='HTML')

    if chat_id not in subscribed_users:
        subscribed_users[chat_id] = True
    if chat_id not in admin_users:
        admin_users[chat_id] = True


@bot.message_handler(commands=['period'])
def new_period(message):
    chat_id = message.chat.id
    if chat_id in admin_users:
        result = re.findall(r'\d+', message.text)
        if len(result) == 1:
            new_time_between_scanning = result[0]
            global ALLOWED_PERIODS
            if new_time_between_scanning in ALLOWED_PERIODS:
                global time_between_scanning
                time_between_scanning = new_time_between_scanning
                bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ <b>{time_between_scanning}</b>'
                                          f' –º–∏–Ω—É—Ç.', parse_mode='HTML')
            else:
                bot.send_message(chat_id, f'–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {MIN_PERIOD} –¥–æ {MAX_PERIOD} –º–∏–Ω—É—Ç.')
        else:
            bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã.')


# def time_between_scanning():
#     return 60*30  # –¢–∞–π–º–µ—Ä –º–µ–∂–¥—É —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏: 30 –º–∏–Ω—É—Ç.


def send_hh_message():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """

    while True:
        if bot_active:
            try:
                time.sleep(5)
                data_from_parser = run_parsing()
                if data_from_parser:
                    for i in data_from_parser:
                        result = ''
                        for chat_id in subscribed_users:
                            for key, value in i.items():
                                if key == 'Title':
                                    result += f'üíº <b><a href="{i["Link"]}">{value}</a></b>\n'
                                elif key == 'Salary':
                                    result += f'üí∞ <b>{value}</b>\n'
                                elif key == 'Company':
                                    result += f'üèôÔ∏è <b>{value}</b>\n'
                                elif key == 'Image':
                                    img_path = f'static/{i[key]}'
                                    if os.path.exists(img_path):
                                        with open(img_path, 'rb') as resized_image_file:
                                            bot.send_photo(chat_id, photo=resized_image_file, caption=result,
                                                           parse_mode='html')
                                    else:
                                        default_img_path = f'static/hh.png'
                                        if os.path.exists(default_img_path):
                                            with open(default_img_path, 'rb') as resized_image_file:
                                                bot.send_photo(chat_id, photo=resized_image_file, caption=result,
                                                               parse_mode='html')
                                        else:
                                            bot.send_photo(chat_id, photo=None, caption=result,
                                                           parse_mode='html')

                print(f'–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subscribed_users}')

                time.sleep(time_between_scanning)

            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}')
        else:
            time.sleep(60*5)


def main():
    t = threading.Thread(target=send_hh_message)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞.
    t.daemon = True  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    t.start()
    bot.polling(none_stop=True)


bot.polling(none_stop=True)
#
# if __name__ == '__main__':
#     main()
