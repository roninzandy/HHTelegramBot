import copy
from telebot import types
from datetime import datetime
import os
import random
import re
import sqlite3
from time import sleep
import telebot

import config
import db

from parsing import run_parsing


class MyBot:

    bot = telebot.TeleBot(config.TOKEN_TEST)
    bot_active = True
    admin_users = {}

    MIN_PERIOD = 10  #*60
    MAX_PERIOD = 60  #*60
    ALLOWED_PERIODS = list(range(MIN_PERIOD, MAX_PERIOD + 1, 10))  #600
    time_between_scanning = MIN_PERIOD  # –í—Ä–µ–º—è –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏.
    period = 20 #*60  # –í—Ä–µ–º—è –º–µ–∂–¥—É —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    data = [{'per': i, 'data': []} for i in ALLOWED_PERIODS]

    ALLOWED_KEYWORDS = ['python', 'django', 'flask']
    keyword = 'python'  # –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    try:
        db.select_chat_id_for_telegram_users()
    except sqlite3.OperationalError:
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç, —Ç–∞–±–ª–∏—Ü–∞ 'telegram_users' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –µ–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å.
        db.create_table_for_telegram_users()

    @bot.message_handler(commands=['start'])
    def welcome(message):
        if MyBot.bot_active:
            chat_id = message.chat.id
            with open('static/hh_preview.png', 'rb') as img_preview:
                result = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! \n' \
                         f'–Ø - <b>{MyBot.bot.get_me().first_name}</b>, ' \
                         f'–∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏' \
                         f' —Å hh.kz!\n\n'\
                         'üì© –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–µ ' \
                         f'<b>{int(AdminPanel.period / 60)}</b> –º–∏–Ω—É—Ç –ø–æ ' \
                         f'–∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É <b>"{AdminPanel.keyword}"</b>.\n\n' \
                         '‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' \
                         '/keyword - –∑–∞–¥–∞–µ—Ç—Å—è –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π ("python", "django" –∏–ª–∏ "flask").\n' \
                         '/period [—á–∏—Å–ª–æ] - –∑–∞–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É ' \
                         '–∑–∞–ø—Ä–æ—Å—É (10, 20, 30, 40, 50 –∏–ª–∏ 60 –º–∏–Ω—É—Ç).\n'


                MyBot.bot.send_photo(chat_id, photo=img_preview, caption=result, parse_mode='html')


            if chat_id not in db.select_chat_id_for_telegram_users():
                db.insert_data_for_telegram_users(chat_id, AdminPanel.period, AdminPanel.keyword)

    @bot.message_handler(commands=['period'])
    def new_period(message):
        chat_id = message.chat.id

        period = re.findall(r'\d+', message.text)
        if len(period) == 1:
            new_period = int(period[0])*60
            if new_period in MyBot.ALLOWED_PERIODS:
                db.update_period_for_telegram_users(chat_id, new_period)
                AdminPanel.bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ '
                                                     f'<b>{int(new_period/60)}</b>'
                                                     f' –º–∏–Ω—É—Ç.', parse_mode='HTML')
            else:
                AdminPanel.bot.send_message(chat_id, f'–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: 10, 20, 30, 40, 50 –∏–ª–∏ 60 –º–∏–Ω—É—Ç')
        else:
            AdminPanel.bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã.')


    @bot.message_handler(commands=['keyword'])
    def choose_keyword(message):
        chat_id = message.chat.id

        AdminPanel.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.")
        # if message.text.lower() in MyBot.ALLOWED_KEYWORDS:
        #     AdminPanel.bot.register_next_step_handler(message, AdminPanel.set_keyword)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 1 –∏ 2
        button1 = types.KeyboardButton("python")
        button2 = types.KeyboardButton("django")
        button3 = types.KeyboardButton("flask")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        markup.add(button1, button2, button3)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        AdminPanel.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=markup)

    def set_keyword(message):
        chat_id = message.chat.id
        #if (len(message.text.split()) == 1) and message.text.isalpha():
        if message.text.lower() in MyBot.ALLOWED_KEYWORDS:
            db.update_keyword_for_telegram_users(chat_id, message.text.lower())
            AdminPanel.bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '
                                                 f'<b>{message.text.lower()}</b>', parse_mode='HTML')
        else:
            AdminPanel.bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º"
                                                 "–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")

    @staticmethod
    def run():
        MyBot.bot.polling(none_stop=True)

class AdminPanel(MyBot):
    @MyBot.bot.message_handler(commands=['admin'])
    def admin(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            AdminPanel.admin_success(message)
        else:
            AdminPanel.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.')
            AdminPanel.bot.register_next_step_handler(message, AdminPanel.admin_password)

    def admin_password(message):
        if message.text == config.admin_password:
            AdminPanel.admin_success(message)

    def admin_success(message):
        chat_id = message.chat.id

        hello_admin = ''
        if chat_id not in AdminPanel.admin_users:
            AdminPanel.admin_users[chat_id] = True
            hello_admin = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {message.from_user.first_name}! ' \
                          f'–¢–µ–ø–µ—Ä—å —É –í–∞—Å –±–æ–ª—å—à–µ –≤–ª–∞—Å—Ç–∏ –Ω–∞–¥ –±–æ—Ç–æ–º! \n\n'
        if AdminPanel.bot_active:
            bot_status = '–±–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç'
        else:
            bot_status = '–±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
        AdminPanel.bot.send_message(message.chat.id, f'{hello_admin} '
                                                     f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>{bot_status}</b>.\n\n'
                                                     f'–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–µ '
                                                     f'<b>{int(AdminPanel.time_between_scanning/60)}</b> –º–∏–Ω—É—Ç –ø–æ '
                                                     f'–∫–ª—é—á–µ–º—É —Å–ª–æ–≤—É <b>{AdminPanel.keyword}</b>.\n\n'
                                                     '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                                     '/users - –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Ö –±–æ—Ç–∞.\n'
                                                     '/message - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n'
                                                     '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.\n'
                                                     '/run - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n'
                                                     '/error - –≤—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ—à–∏–±–æ–∫.\n'
                                                     '/adminquit - –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.', parse_mode='HTML')

    @MyBot.bot.message_handler(commands=['adminquit'])
    def admin_quit(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            del AdminPanel.admin_users[chat_id]
            AdminPanel.bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Å—Ç–∞–ª–∏ –æ–±—ã—á–Ω—ã–º —é–∑–µ—Ä–æ–º!')

    @MyBot.bot.message_handler(commands=['users'])
    def users(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            AdminPanel.bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Ö –±–æ—Ç–∞: '
                                                         f'{len(db.select_chat_id_for_telegram_users())}')

    @MyBot.bot.message_handler(commands=['stop'])
    def stop_bot(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            if not AdminPanel.bot_active:
                AdminPanel.bot.send_message(chat_id, "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            else:
                AdminPanel.bot.send_message(chat_id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                AdminPanel.bot_active = False

    @MyBot.bot.message_handler(commands=['run'])
    def run_bot(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            if AdminPanel.bot_active:
                AdminPanel.bot.send_message(chat_id, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            else:
                AdminPanel.bot.send_message(chat_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
                AdminPanel.bot_active = True

    @MyBot.bot.message_handler(commands=['message'])
    def message_for_users(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            AdminPanel.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            AdminPanel.bot.register_next_step_handler(message, AdminPanel.sending_message_for_users)

    def sending_message_for_users(message):
        for user_id in db.select_chat_id_for_telegram_users():
            AdminPanel.bot.send_message(user_id, f'‚ùóÔ∏è {message.text}')



    @MyBot.bot.message_handler(commands=['error'])
    def show_error(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            if os.path.exists('logs.txt'):
                with open('logs.txt', encoding='UTF-8') as f:
                    rows = f.readlines()
                    if len(rows) > 0:
                        AdminPanel.bot.send_message(chat_id, f'{rows[-1]}')
                    else:
                        AdminPanel.bot.send_message(chat_id, '–ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ –ø—É—Å—Ç.')
            else:
                AdminPanel.bot.send_message(chat_id, '–ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω.')

    @classmethod
    def send_error(cls):
        with open('logs.txt', encoding='UTF-8') as f:
            rows = f.readlines()
            for admin_id in cls.admin_users:
                cls.bot.send_message(admin_id, f'‚ùóÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.\n\n Ô∏è'
                                               f'‚ùóÔ∏è {rows[-1]}')



    @MyBot.bot.message_handler(commands=['doc', 'document'])
    def handle_document(message):
        chat_id = message.chat.id
        if chat_id in AdminPanel.admin_users:
            AdminPanel.bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt")
            AdminPanel.bot.register_next_step_handler(message, AdminPanel.darri_keyword)


    def darri_keyword(message):
        chat_id = message.chat.id
        if message.document.mime_type == 'text/plain':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            file_info = AdminPanel.bot.get_file(message.document.file_id)
            downloaded_file = AdminPanel.bot.download_file(file_info.file_path)
            text = downloaded_file.decode("utf-8")

        if chat_id in AdminPanel.admin_users:
            AdminPanel.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏.")
            AdminPanel.bot.register_next_step_handler(message, AdminPanel.darri, text)

    def darri(message, text):
        chat_id = message.chat.id
        owner = '@kjetll_art'
        lst_all = []
        lst = []
        lst_repeated = []
        limit = 280
        extra = message.text

        website = 'twitter'
        pattern_test = r'bsky.social'
        matches_test = re.findall(pattern_test, text)
        if matches_test:
            website = 'bluesky'

        print(website)

        pattern = r'@(\w+)'
        matches = re.findall(pattern, text)
        print(len(matches))
        for match in matches:
            if website == 'twitter':
                m = f"@{match}"
            elif website == 'bluesky':
                m = f"@{match}.bsky.social"
            else:
                m = f"@{match}"

            if m not in lst_all:
                lst_all.append(m)
                print(m)
            else:
                lst_repeated.append(m)
                print(f'[repeated] ------------------------------> {m}')
        lst_all.remove(owner)
        sleep(1)
        #random.shuffle(lst_all)
        lst_all.sort()
        sleep(1)
        print(f'len(lst_all): {len(lst_all)}')
        lst_all_str = ' '.join(lst_all)
        print(f'lst_all_str: {lst_all_str}')
        lst_all_str_len = len(lst_all_str)
        print(lst_all_str_len)
        amount_of_lists = (lst_all_str_len // (limit - len(extra))) + 2
        print(amount_of_lists)

        # creating dict with lists
        lists = {}
        for i in range(amount_of_lists):
            list_name = f"list_{i}"
            lists[list_name] = []

            # filling lists with limit or symbols
        count = 0
        n = 0 #–Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è
        for i in lst_all:
            x = len(str(i)) + 1  #–¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            if (count + x) < (limit - len(extra)):
                count += x
            else:
                n += 1
                count = x
            lists[f'list_{n}'].append(i)


        # forming final list with lists of dict values
        for list_name, list_items in lists.items():
            if lists[list_name]:
                lst.append(list_items)
        # forming final

        with open('to_kjetll.txt', 'w', encoding='utf-8') as f:
           for x1 in lst:
               f.write(f"\n\n{extra}\n")
               for x2 in x1:
                   f.write(f'{x2} ')

        res = ''

        for x1 in lst:
            res += f"\n\n{extra}\n"
            for x2 in x1:
                res += f'{x2} '
        print(res)

        result = f'\nAmount of dicts: {len(lst)}\nNames found: {len(lst_all) + len(lst_repeated)}\n' \
                 f'Users: {len(lst_all)}\nRepeats: {len(lst_repeated)}\n{lst_repeated}\nüíã'

        print(result)

        if os.path.exists("to_kjetll.txt") and os.path.getsize("to_kjetll.txt") > 0:
            AdminPanel.bot.send_document(chat_id, open("to_kjetll.txt", "rb"), caption=result)
        else:
            print("–§–∞–π–ª 'to_kjetll.txt' –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


class MessageSender(AdminPanel):
    def send_message(cls):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        period = 0  # –ù–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        while True:
            if cls.bot_active:
                period += 10

                if period > 60:
                    period = period % 60

                available_periods = []  # –ü–µ—Ä–∏–æ–¥—ã (–∫—Ä–∞—Ç–Ω—ã–µ —Ç–µ–∫—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —ç—Ç–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –ø–æ—Å–ª–µ
                                        # —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç —Ä–∞—Å—Å—ã–ª–∫—É.

                for allowed_period in MyBot.ALLOWED_PERIODS:
                    if period % allowed_period == 0:
                        available_periods.append(allowed_period)



                print(f'Period: {period}')
                print(f'Users" periods for response: {available_periods}')

                for v in MyBot.ALLOWED_KEYWORDS:  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.

                    data_from_parser = run_parsing(v)
                    z_lst = []  # –°–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ñ–∏—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º.
                    for data in MyBot.data:
                        data['data'] += data_from_parser  # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–∂–¥—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏—Ç —Ä–∞—Å—Å—ã–ª–∫—É.
                        if data['per'] in available_periods: # –í —Å–ª—É—á–∞–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞.
                            z_lst.append(copy.deepcopy(data))
                            data['data'].clear()

                    print(f'z_lst: {z_lst}')

                    for datas in z_lst:
                        if datas['data']:
                            for i in datas['data']:
                                for chat_id in db.select_keyword_and_period_for_telegram_users(v, (datas['per'] * 60) % 3600):
                                    result = ''
                                    try:
                                        for key, value in i.items():
                                            if key == 'Title':
                                                result += f'üíº <b><a href="{i["Link"]}">{value}</a></b>\n'
                                            elif key == 'Salary':
                                                result += f'üí∞ <b>{value}</b>\n'
                                            elif key == 'Company':
                                                result += f'üèôÔ∏è <b>{value}</b>\n'
                                            elif key == 'Image':
                                                img_path = f'static/{i[key]}'
                                                if os.path.exists(img_path):
                                                    with open(img_path, 'rb') as image_file:
                                                        cls.bot.send_photo(chat_id, photo=image_file, caption=result,
                                                                           parse_mode='html')
                                                else:
                                                    default_img_path = f'static/hh.png'
                                                    if os.path.exists(default_img_path):
                                                        with open(default_img_path, 'rb') as default_image_file:
                                                            cls.bot.send_photo(chat_id, photo=default_image_file,
                                                                               caption=result, parse_mode='html')
                                                    else:
                                                        cls.bot.send_photo(chat_id, photo=None, caption=result,
                                                                           parse_mode='html')
                                    except telebot.apihelper.ApiTelegramException:
                                        db.delete_user(chat_id)

                print(f'–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {db.select_chat_id_for_telegram_users()}')
                date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                with open('success.txt', 'a', encoding='UTF-8') as f:
                    f.write(f'[{date}]: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.\n')

                sleep(cls.time_between_scanning)  #–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏

            else:
                print('–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.')
                sleep(60 * 5)  # –¢–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
                               # –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª '/stop'.
